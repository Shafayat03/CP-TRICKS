/// lower bound  & upper bound   also the index access in those code ---> TRICKs

#include <bits/stdc++.h>
using namespace std;
#define int long long
typedef long long ll;
int32_t main() {
    long long n;
    cin >> n;
    vector<long long > v;
    
    //for(auto &i : v )cin >> i;
    
    for(int i = 0; i < n; i++)
    {
        ll x;
        cin >> x;
        
        v.push_back(x);
    }
    
    sort(v.begin(), v.end());
    
    for(ll i= 0 ;i < n; i++) cout << v[i] <<  " "; /// 1 2 3 4 5
    
    cout << endl;
    
   
   //// upperbound index accessing 
   
   
   //int index = upper_bound(v.begin(), v.end(), 5) - v.begin(); /// 5 
   /// 5 j index e access hoi setah return kore 
   
   
   //int index = lower_bound(v.begin(), v.end(), 5) - v.begin(); 
   /// 5 er immediate ager index tah k access kore 
    //  cout << index << endl;
   
   /// lower bound er value find kora 
   
   
   //auto it = lower_bound(v.begin(), v.end(), 3); /// 5
 //  cout << *it << endl;  /// 3 no index er value return kore 
   
   
   /// upper bound er ager index er value output dei 
   
   auto it = upper_bound(v.begin(), v.end(), 3); /// 5
   cout << *it << endl;  
   
   
   
   
   
l;
   
   
   /// serarching  a sorted in n lg n time complexity using Binary Search Buildin 
      
   /// if 9 exist basically return true and false
   
    
   bool bns = binary_search(v.begin(),v.end(), 9);
   if(bns) cout <<"YES\n";
   else cout <<"NO\n";
   
   
   
   
   //lower bound -- > reutrn >= x;
  // upper bound --> return > x;
   
   
   
   
   
    return 0;
}
